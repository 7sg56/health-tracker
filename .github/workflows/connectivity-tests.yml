name: Connectivity Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      execution_mode:
        description: 'Test execution mode'
        required: false
        default: 'PARALLEL'
        type: choice
        options:
          - SEQUENTIAL
          - PARALLEL
          - MIXED
      test_suites:
        description: 'Test suites to run (comma-separated or "all")'
        required: false
        default: 'all'
        type: string
      backend_url:
        description: 'Backend URL for testing'
        required: false
        default: 'http://localhost:8080'
        type: string
      frontend_url:
        description: 'Frontend URL for testing'
        required: false
        default: 'http://localhost:3000'
        type: string

env:
  JAVA_VERSION: '17'
  NODE_VERSION: '18'
  MAVEN_OPTS: '-Xmx1024m'

jobs:
  connectivity-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: healthtracker_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ht-frontend/package-lock.json
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y bc curl jq
    
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Cache Node.js dependencies
      uses: actions/cache@v3
      with:
        path: ht-frontend/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('ht-frontend/package-lock.json') }}
        restore-keys: ${{ runner.os }}-node
    
    - name: Build backend
      run: |
        cd ht-backend
        mvn clean compile -DskipTests
    
    - name: Build frontend
      run: |
        cd ht-frontend
        npm ci
        npm run build
    
    - name: Build shared testing module
      run: |
        cd shared-testing
        mvn clean compile -DskipTests
    
    - name: Start backend service
      run: |
        cd ht-backend
        nohup mvn spring-boot:run -Dspring-boot.run.profiles=test > backend.log 2>&1 &
        echo $! > backend.pid
        
        # Wait for backend to start
        for i in {1..30}; do
          if curl -s http://localhost:8080/actuator/health > /dev/null; then
            echo "Backend started successfully"
            break
          fi
          echo "Waiting for backend to start... ($i/30)"
          sleep 2
        done
    
    - name: Start frontend service
      run: |
        cd ht-frontend
        nohup npm run start > frontend.log 2>&1 &
        echo $! > frontend.pid
        
        # Wait for frontend to start
        for i in {1..30}; do
          if curl -s http://localhost:3000 > /dev/null; then
            echo "Frontend started successfully"
            break
          fi
          echo "Waiting for frontend to start... ($i/30)"
          sleep 2
        done
    
    - name: Run connectivity tests
      env:
        EXECUTION_MODE: ${{ github.event.inputs.execution_mode || 'PARALLEL' }}
        TEST_SUITES: ${{ github.event.inputs.test_suites || 'all' }}
        BACKEND_URL: ${{ github.event.inputs.backend_url || 'http://localhost:8080' }}
        FRONTEND_URL: ${{ github.event.inputs.frontend_url || 'http://localhost:3000' }}
        DATABASE_URL: 'jdbc:postgresql://localhost:5432/healthtracker_test'
        CI: 'true'
        BUILD_NUMBER: ${{ github.run_number }}
        GIT_COMMIT: ${{ github.sha }}
        GIT_BRANCH: ${{ github.ref_name }}
      run: |
        chmod +x shared-testing/scripts/run-connectivity-tests.sh
        shared-testing/scripts/run-connectivity-tests.sh \
          --mode "$EXECUTION_MODE" \
          --suites "$TEST_SUITES" \
          --backend-url "$BACKEND_URL" \
          --frontend-url "$FRONTEND_URL" \
          --database-url "$DATABASE_URL" \
          --report-format "html,json,junit" \
          --timeout 300 \
          --skip-backend-start \
          --skip-frontend-start
    
    - name: Upload test reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: connectivity-test-reports-${{ github.run_number }}
        path: |
          shared-testing/test-reports/
          ht-backend/backend.log
          ht-frontend/frontend.log
        retention-days: 30
    
    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Connectivity Tests
        path: shared-testing/test-reports/junit/*.xml
        reporter: java-junit
        fail-on-error: true
    
    - name: Generate test summary
      if: always()
      run: |
        if [ -f "shared-testing/test-reports/build-summary.json" ]; then
          echo "## Connectivity Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Extract results from build summary
          TOTAL_TESTS=$(jq -r '.testResults.totalTests' shared-testing/test-reports/build-summary.json)
          PASSED_TESTS=$(jq -r '.testResults.passedTests' shared-testing/test-reports/build-summary.json)
          FAILED_TESTS=$(jq -r '.testResults.failedTests' shared-testing/test-reports/build-summary.json)
          SUCCESS_RATE=$(jq -r '.testResults.successRate' shared-testing/test-reports/build-summary.json)
          STATUS=$(jq -r '.status' shared-testing/test-reports/build-summary.json)
          
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Status | $STATUS |" >> $GITHUB_STEP_SUMMARY
          echo "| Total Tests | $TOTAL_TESTS |" >> $GITHUB_STEP_SUMMARY
          echo "| Passed | $PASSED_TESTS |" >> $GITHUB_STEP_SUMMARY
          echo "| Failed | $FAILED_TESTS |" >> $GITHUB_STEP_SUMMARY
          echo "| Success Rate | $SUCCESS_RATE% |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "$STATUS" = "SUCCESS" ]; then
            echo "✅ All connectivity tests passed!" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some connectivity tests failed. Check the detailed reports." >> $GITHUB_STEP_SUMMARY
          fi
        fi
    
    - name: Comment PR with test results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = 'shared-testing/test-reports/build-summary.json';
          
          if (fs.existsSync(path)) {
            const summary = JSON.parse(fs.readFileSync(path, 'utf8'));
            
            const status = summary.status === 'SUCCESS' ? '✅' : '❌';
            const comment = `## ${status} Connectivity Test Results
            
            | Metric | Value |
            |--------|-------|
            | Status | ${summary.status} |
            | Total Tests | ${summary.testResults.totalTests} |
            | Passed | ${summary.testResults.passedTests} |
            | Failed | ${summary.testResults.failedTests} |
            | Success Rate | ${summary.testResults.successRate}% |
            
            **Execution Details:**
            - Mode: ${summary.buildInfo.executionMode}
            - Test Suites: ${summary.buildInfo.testSuites}
            - Backend URL: ${summary.environment.backendUrl}
            - Frontend URL: ${summary.environment.frontendUrl}
            
            [View detailed reports](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }
    
    - name: Stop services
      if: always()
      run: |
        # Stop backend
        if [ -f "ht-backend/backend.pid" ]; then
          kill $(cat ht-backend/backend.pid) || true
        fi
        
        # Stop frontend
        if [ -f "ht-frontend/frontend.pid" ]; then
          kill $(cat ht-frontend/frontend.pid) || true
        fi
        
        # Kill any remaining processes
        pkill -f "spring-boot:run" || true
        pkill -f "npm run start" || true

  deployment-validation:
    runs-on: ubuntu-latest
    needs: connectivity-tests
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
    
    - name: Validate deployment readiness
      run: |
        echo "## Deployment Validation" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Download test results from previous job
        # In a real scenario, you would validate against staging/production endpoints
        
        echo "✅ Connectivity tests passed - deployment validation successful" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "The application is ready for deployment to production." >> $GITHUB_STEP_SUMMARY
    
    - name: Trigger deployment
      if: success()
      run: |
        echo "Deployment would be triggered here"
        # In a real scenario, you would trigger your deployment pipeline
        # Example: curl -X POST $DEPLOYMENT_WEBHOOK_URL