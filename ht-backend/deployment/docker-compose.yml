version: '3.8'

services:
  # Health Tracker Backend Application
  healthtracker-backend:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
    container_name: healthtracker-backend
    restart: unless-stopped
    ports:
      - "8080:8080"  # Main application port
      - "8081:8081"  # Management/actuator port
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - DB_URL=jdbc:mysql://mysql:3306/health_tracker_prod
      - DB_USERNAME=healthtracker_user
      - DB_PASSWORD=${DB_PASSWORD}
      - COOKIE_DOMAIN=${COOKIE_DOMAIN:-localhost}
      - SSL_ENABLED=${SSL_ENABLED:-false}
      - LOG_FILE_PATH=/var/log/healthtracker/application.log
      - MANAGEMENT_PORT=8081
    volumes:
      - ./logs:/var/log/healthtracker
      - ./ssl:/opt/ssl:ro
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - healthtracker-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: healthtracker-mysql
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=health_tracker_prod
      - MYSQL_USER=healthtracker_user
      - MYSQL_PASSWORD=${DB_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/init:/docker-entrypoint-initdb.d:ro
      - ./mysql/conf:/etc/mysql/conf.d:ro
    networks:
      - healthtracker-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "healthtracker_user", "-p${DB_PASSWORD}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: healthtracker-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - healthtracker-backend
    networks:
      - healthtracker-network
    profiles:
      - with-nginx

  # Prometheus for metrics collection (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: healthtracker-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - healthtracker-network
    profiles:
      - with-monitoring

  # Grafana for metrics visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: healthtracker-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - healthtracker-network
    profiles:
      - with-monitoring

volumes:
  mysql_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  healthtracker-network:
    driver: bridge